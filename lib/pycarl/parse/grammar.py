#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


__version__ = (2016, 4, 21, 18, 34, 2, 3)

__all__ = [
    'parserParser',
    'parserSemantics',
    'main'
]

KEYWORDS = set([
    'false',
    'true',
])


class parserParser(Parser):
    def __init__(self,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=None,
                 left_recursion=False,
                 keywords=KEYWORDS,
                 **kwargs):
        super(parserParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            keywords=keywords,
            **kwargs
        )

    @graken()
    def _identifier_(self):
        self._pattern(r'(?!\d)[\w_]+')
        self._check_name()

    @graken()
    def _number_(self):
        self._pattern(r'\d+(\.\d+)?([eE][+-]?\d+)?')

    @graken()
    def _bool_(self):
        with self._choice():
            with self._option():
                self._token('true')
            with self._option():
                self._token('false')
            self._error('expecting one of: false true')

    @graken()
    def _expression_(self):
        self._formula_()
        self.name_last_node('@')
        self._check_eof()

    @graken()
    def _formula_(self):
        self._iff_form_()
        self.name_last_node('@')

    @graken()
    def _iff_form_(self):
        self._imp_form_()
        self.name_last_node('lhs')

        def block2():
            self._token('<->')
            self._cut()
            self._imp_form_()
        self._closure(block2)
        self.name_last_node('rhs')

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken()
    def _imp_form_(self):
        self._xor_form_()
        self.name_last_node('lhs')

        def block2():
            self._token('->')
            self._cut()
            self._xor_form_()
        self._closure(block2)
        self.name_last_node('rhs')

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken()
    def _xor_form_(self):
        self._or_form_()
        self.name_last_node('lhs')

        def block2():
            self._token('^')
            self._cut()
            self._or_form_()
        self._closure(block2)
        self.name_last_node('rhs')

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken()
    def _or_form_(self):
        self._and_form_()
        self.name_last_node('lhs')

        def block2():
            self._token('|')
            self._cut()
            self._and_form_()
        self._closure(block2)
        self.name_last_node('rhs')

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken()
    def _and_form_(self):
        self._constraint_()
        self.name_last_node('lhs')

        def block2():
            self._token('&')
            self._cut()
            self._constraint_()
        self._closure(block2)
        self.name_last_node('rhs')

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken()
    def _constraint_(self):
        self._eq_expr_()
        self.name_last_node('@')

    @graken()
    def _eq_expr_(self):
        self._rel_expr_()
        self.name_last_node('lhs')
        with self._optional():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('==')
                    with self._option():
                        self._token('!=')
                    with self._option():
                        self._token('=')
                    self._error('expecting one of: != = ==')
            self._cut()
            self._numerical_expr_()
        self.name_last_node('rhs')

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken()
    def _rel_expr_(self):
        self._numerical_expr_()
        self.name_last_node('lhs')
        with self._optional():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('<=')
                    with self._option():
                        self._token('>=')
                    with self._option():
                        self._token('<')
                    with self._option():
                        self._token('>')
                    self._error('expecting one of: < <= > >=')
            self._cut()
            self._numerical_expr_()
        self.name_last_node('rhs')

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken()
    def _numerical_expr_(self):
        self._add_expr_()
        self.name_last_node('@')

    @graken()
    def _add_expr_(self):
        self._scale_expr_()
        self.name_last_node('lhs')

        def block2():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('+')
                    with self._option():
                        self._token('-')
                    self._error('expecting one of: + -')
            self._cut()
            self._scale_expr_()
        self._closure(block2)
        self.name_last_node('rhs')

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken()
    def _scale_expr_(self):
        self._pow_expr_()
        self.name_last_node('lhs')

        def block2():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('*')
                    with self._option():
                        self._token('/')
                    self._error('expecting one of: * /')
            self._cut()
            self._pow_expr_()
        self._closure(block2)
        self.name_last_node('rhs')

        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken()
    def _pow_expr_(self):
        self._unary_expr_()
        self.name_last_node('lhs')
        with self._optional():
            with self._group():
                self._token('**')
            self.name_last_node('op')
            self._pow_expr_()
            self.name_last_node('rhs')

        self.ast._define(
            ['lhs', 'op', 'rhs'],
            []
        )

    @graken()
    def _unary_expr_(self):
        with self._optional():
            with self._choice():
                with self._option():
                    self._token('+')
                with self._option():
                    self._token('-')
                with self._option():
                    self._token('~')
                self._error('expecting one of: + - ~')
        self.name_last_node('op')
        self._cut()
        self._atom_()
        self.name_last_node('rhs')

        self.ast._define(
            ['op', 'rhs'],
            []
        )

    @graken()
    def _atom_(self):
        with self._choice():
            with self._option():
                self._token('(')
                self._formula_()
                self.name_last_node('@')
                self._token(')')
            with self._option():
                self._bool_()
                self.name_last_node('@')
            with self._option():
                self._number_()
                self.name_last_node('@')
            with self._option():
                self._identifier_()
                self.name_last_node('@')
            self._error('no available options')


class parserSemantics(object):
    def identifier(self, ast):
        return ast

    def number(self, ast):
        return ast

    def bool(self, ast):
        return ast

    def expression(self, ast):
        return ast

    def formula(self, ast):
        return ast

    def iff_form(self, ast):
        return ast

    def imp_form(self, ast):
        return ast

    def xor_form(self, ast):
        return ast

    def or_form(self, ast):
        return ast

    def and_form(self, ast):
        return ast

    def constraint(self, ast):
        return ast

    def eq_expr(self, ast):
        return ast

    def rel_expr(self, ast):
        return ast

    def numerical_expr(self, ast):
        return ast

    def add_expr(self, ast):
        return ast

    def scale_expr(self, ast):
        return ast

    def pow_expr(self, ast):
        return ast

    def unary_expr(self, ast):
        return ast

    def atom(self, ast):
        return ast


def main(
        filename,
        startrule,
        trace=False,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=False,
        **kwargs):

    with open(filename) as f:
        text = f.read()
    parser = parserParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard,
        ignorecase=ignorecase,
        **kwargs)
    return ast

if __name__ == '__main__':
    import json
    ast = generic_main(main, parserParser, name='parser')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()
